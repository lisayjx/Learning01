// 1.HTTP协议的无状态性
// 了解HTTP协议的无状态性是进一步学习Session认证机制的必要前提。
// HTTP协议的无状态性，指的是客户端的每次HTTP请求都是独立的，
// 连续多个请求之间没有直接的关系，服务器不会主动保留每次HTTP请求的状态。

// 超市收银员：面对多个客户  但是他不知道谁是会员 只有出示会员卡才知道谁是会员

// //如何突破http无状态的限制？
// 对于超市来说，为了方便收银员在进行结算时给VIP用户打折，超市可以为每个VIP用户发放会员卡。
// 通过会员卡就可以知道用户的vip身份了

// 比如：客户2登陆成功了，服务器给2颁发了一个登陆成功后的身份标识，
//    这样的话，客户2在之后请求服务器的登录时候携带身份标识就可以让服务器之后我们曾经登陆过
// 都说了http是无状态的，cookie是让你知道当前客户端是谁。交互式网页用处相当大，比如电商网站的购物车
// 当你登陆后服务器就会创建一个session对象，并把这个登陆信息放到里面，把session的key当做cookie反给浏览器，浏览器后面再访问就发这个cookie就行了

//    注意:现实生活中的会员卡身份认证方式，在 Web开发中的专业术语叫做Cookie。
// 登陆成功后 服务器会向客户端颁发一个cookie，cookie就是身份认证标识，
// 今后在请求服务器时候把cookie再发给服务器来进行客户端身份的认证
// cookie会突破HTTP无状态的限制

// 3.什么是Cookie
// Cookie 是存储在用户浏览器中的一段不超过4KB的字符串。
// 它由一个名称(Name)、一个值(Value)
// 和其它几个用于控制Cookie有效期、安至性、使用范围的可选属性组成。
// 不同域名下的Cookie各自独立，每当客户端发起请求时，
// 会自动把【当前域名下】所有【未过期的Cookie】一同发送到服务器.
// 比如你刚才访问了百度和京东都有了cookie，百度的cookie不能访问京东的cookie

//在哪里找到cookie？ 控制台 application-cookie-url 表格的字段就是 名称 值 其他啥的
// cookie特性：
// 1.自动发送
// 2.域名独立
// 3.过期时限
// 4.4KB限制 是键值对
// 5.是存储在【用户浏览器】中不超过4KB的字符串

//------cookie在身份认证中的作用-----------
// 客户端第一次请求服务器的时候，服务器通过【响应头的形式】，
// 向客户端发送一个身份认证的Cookie，客户端会自动将Cookie保存在浏览器中。

// 随后，当客户端浏览器每次请求服务器的时候，
// 浏览器会【自动】将身份认证相关的Cookie，【通过请求头】的形式发送给服务器，
// 服务器即可验明客户端的身份。

// 超市给用户发会员卡，以后用户就可以拿着会员卡来超市结账

// 跨域访问的token是要写好的发送，这里说的是不跨的自动发送

// img:cookie
// 像是用户第一次去超市逛，然后超市给了用户一张会员卡，用户以后再继续访问超市就是会员了
/*
|浏览器                 |   --------------1.登录请求 --------------->        |服务器                 |
|                       |  <-----2.通过[响应头],发送cookie给浏览器 --------  |                       |
|     3.保存到浏览器中  |                                                    |                       |
|      身份认证的cookie |                                                    |                       |
|                       |                                                    |                       |
|                       |  -----4.通过[请求头],自动发送cookie给浏览器 ------>|  5.服务器根据请求头   |
|                       |  <-------- 5.响应当前用户对应的内容 -------        |中的cookie验明用户身份 |
|                       |                                                    |                       |
|                       |                                                    |                       |
|                       |                                                    |                       |
 
 */
// 请求头：network-header：Request header  里面有cookie，然后有一大堆英文字母，这里装着键值对，去application中能找到对应的
// 响应头：                Response header
// 是根据浏览器返回的token，拼接的，然后拼接完之后自动返回
 
 
// 5.Cookie 不具有安全性
// 由于Cookie 是存储在浏览器中的，而且浏览器也提供了读写Cookie的API，
// 因此Cookie,很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，
// 通过Cookie的形式发送给浏览器。
// 有的客户伪造会员卡或者拿别人的会员卡 也能打折  所以单纯用会员卡辨别用户身份不安全 

//  可以在自己的浏览器里伪造个cookie，然后每次发请求也可以把cookie发送到服务器
 //注意：：：注意:千万不要使用Cookie存储重要且隐私的数据!比如用户的身份信息、密码等。



 //---------------------------提高身份认证的安全性------------------------
//  为了防止客户伪造会员卡，收银员在拿到客户出示的会员卡之后，
//  可以在收银机上进行刷卡认证。只有收银机确认存在的会员卡，才能被正常使用。
// 会员卡+刷卡认证

// 这种  “会员卡＋刷卡认证”  的设计理念，就是【Session认证】机制的精髓。
    // 会员卡cookie：客户端保存   刷卡认证身份认证：服务端
    // 将钥匙生成之后放在cookie中，客服端每次请求携带这个钥匙，服务端解密获取对应的用户信息

    // session工作原理在img中
    // session 是数据存放在服务器的，而cookie 是数据存在在客户端浏览器的