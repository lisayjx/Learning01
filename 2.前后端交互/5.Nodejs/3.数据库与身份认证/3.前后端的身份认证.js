//1.web开发模式
// 目前主流的 Web开发模式有两种，分别是:
// 1.基于服务端渲染的传统 Web开发模式----------
//         服务端渲染的概念:服务器发送给客户端的HTML页面，
//         是在服务器通过字符串的拼接，动态生成的。
//         因此，客户端不需要使用Ajax这样的技术额外请求页面的数据。代码示例如下:
//   优点:
// 前端耗时少。因为服务器端负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电。
// 有利于SEO。因为服务器端响应的是完整的HTML页面内容，所以爬虫更容易爬取获得信息，更有利于SEO.
//   缺点:
// 占用服务器端资源。即服务器端完成HTML页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。
// 不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于
// 项目高效开发。
// 

// 2.基于前后端分离的新型 Web开发模式-------------------
    // 前后端分离的概念:前后端分离的开发模式，依赖于Ajax技术的广泛应用。
    // 简而言之，前后端分离的Web开发模式,就是后端只负责提供API接口，前端使用Ajax调用接口的开发模式。

    //   优点:
    // 开发体验好。前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性。
    // 用户体验好。Ajax技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。
    // 减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。
    //   缺点:
    // 不利于SEO。因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。(解决方
    // 案:利用Vue、React 等前端框架的SSR (server side render）技术能够很好的解决SEO问题! )
  
    // 3.如何选择Web开发模式-------------
    // 不谈业务场景而盲目选择使用何种开发模式都是耍流氓。
    // ●比如企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的SEO,则这时我们就需要使用服务器端渲染;
    // ●而类似后台管理项目，交互性比较强，不需要考虑SEO,那么就可以使用前后端分离的开发模式。
    // 另外，具体使用何种开发模式并不是绝对的，为了同时兼顾了首页的渲染速度和前后端分离的开发效率，
    // 一些网站采用了  首屏服务器端渲染+其他页面前后端分离 的开发模式。
    // 总结一句话，管他什么场景，用前端框架+Node就对了   


// //1.基于服务端渲染的传统 Web开发模式
// app.get('./index.html', (req, res) => {
//     //要渲染的数据
//     const user = { name: 'zs' }
//     //服务器通过字符串拼接，动态生成html内容
//     const html = `<h1>姓名：${user.name}</h1>`
//     //把生成成的页面内容响应给客户端。因此，客户端拿到的是带有真实数据的HTML页面
//     res.send(html)
// })


//----------------身份认证-----------------------------------------
// 1.什么是身份认证
// 身份认证(Authentication)又称“身份验证”、“鉴权”，是指【通过一定的手段，完成对用户身份的确认。】
// 日常生活中的身份认证随处可见，
// 例如:高铁的验票乘车，手机的密码或指纹解锁，支付宝或微信的支付密码等。
// 在Web开发中，也涉及到用户身份的认证，
// 例如:各大网站的手机验证码登录、邮箱密码登录、二维码登录等。

// 2.为什么需要身份认证
// 身份认证的目的，是为了【确认当前所声称为某种身份的用户，确实是所声称的用户。】
// 例如，你去找快递员取快递，你要怎么证明这份快递是你的。
// 在互联网项目开发中，如何对用户的身份进行认证，是一个值得深入探讨的问题。
// 例如，如何才能保证网站不会错误的将“马云的存款数额”显示到“马化腾的账户”上。
// 3.不同开发模式下的身份认证
// 对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案:
//   服务端渲染推荐使用Session 认证机制
//   前后端分离推荐使用JWT认证机制



 