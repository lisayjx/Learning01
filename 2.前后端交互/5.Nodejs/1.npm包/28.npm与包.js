// 1.什么是包
// Node.js 中的第三方模块又叫做包。  里面也有各种模块可以用
// 就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。

// 内置模块，自定义模块，第三方模块

//  第三方API模块(express、mysql等)

//  2.包的来源
// 不同于Node.,js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。
// 注意: Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用。
// 3.为什么需要包
// 由于Nodejs的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时，效率很低。
// 包是基于内置模块封装出来的，提供了更高级、更方便的API，极大的提高了开发效率。
// 【包是基于内置模块封装出来的】
// 包和内置模块之间的关系，类似于jQuery和浏览器内置API之间的关系。

// 4.从哪里下载包
// 搜索包：
// 国外有一家IT公司，叫做npm, Inc.这家公司旗下有一个非常著名的网站:
//  https://www.npmjs.com/，它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心!

// 下载包：
//  npm, Inc.公司提供了一个地址为https://registry.npmjs.org/的服务器，
//  来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。
 
//  5.如何下载包
//  npm, Inc.公司提供了一个包管理工具，我们可以使用这个包管理工具，从
//  https://registry.npmjs.org/  服务器把需要的包下载到本地使用。
//  这个包管理工具的名字叫做Node Package Manager (简称npm包管理工具)，
//  这个包管理工具随着Node.js 的安装包一起被安装到了用户的电脑上。
//  大家可以在终端中执行npm -v命令，来查看自己电脑上所安装的npm包管理工具的版本号:
// 出现了版本号 就可以使用npm这个包管理工具去服务器下载包了



//6.在项目中安装包的命令------------------------------------------
// 如果想在项目中安装指定名称的包，需要运行如下的命令:
//  npm install 包的完整名称
// npm i 完整的包名称
// npm i 包 包 包        安装多个包
//一次性安装所有包   npm i
//执行npm i命令时，npm包管理工具会先读取package.json 中的 dependencies 节点,1读取到记录的所有依赖包名称和版本号之后，npm包管理工真会把这些包一次性下载到项目中
//有利于你拿到别人项目时候不知道你要下载哪个包，这样你就能把它用到的包全都下载下来
// npm i会把项目根目录中得package.json里的dependencies中的记录的包都给下载下来

// 7.初次装包后多了哪些文件
// 初次装包完成后，在项目文件夹下多一个叫做node_modules 的文件夹
// 和package-lock.json 的配置文件。
// 其中:
// node_modules文件夹用来存放所有【已安装到项目中的包】。require()导入第三方包时，
// 就是从这个目录中查找并加载包。
//  你node安装在哪里npm就在哪里
 
// node_modules->npm->package-lock.json配置文件用来记录node_modules目录下的
// 每一个包的下载信息，例如包的名字、版本号、下载地址等。
// 注意:程序员不要手动修改node_modules或 package-lockjson文件中的任何代码，npm包管理工具会自动维护它们,

//8.下载指定版本的包
// 8.默认情况下，使用npm install 命令安装包的时候，会自动安装最新版本的包。
// 如果需要安装指定版本的包，可以在包名之后，通过@符号指定具体的版本，例如:
//   npm i moment@2.22.2


// 9.包的语义化版本规范
// 包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，
// 例如2.24.0其中每一位数字所代表的的含义如下:
// 第1位数字:大版本            底层重构设计大改变
// 第2位数字:功翻版本          新增功能
// 第3位数字:Bug修复版本       修复了多少次bug

// 版本号提升的规则:只要前面的版本号增长了，则后面的版本号归零。
// 例如 2.24.0 重构了 变成了3.0.0
// 例如 2.24.0 增加了功能 变成了2.25.0


//卸载指定包
// npm uninstall 包名    没有简写形式
// 注意: npm uninstall 命令执行成功后，会把卸载的包，自动从package.json的dependencies 中移除掉。
 

//-----------------包管理配置文件-------------------------
//  包管理配置文件     【得在项目根目录中！！！！】
// npm规定，在项目根目录中，必须提供一个叫做  package.json  的包管理配置文件。
// 用来记录与项目有关的一些配置信息。
// 例如: 
// ●项目的名称、版本号、描述等
// ●项目中都用到了哪些包
// ●哪些包只在  开发期间  会用到
// ●那些包在  开发和部署  时都需要用到

//----------多人协作问题*-----------------
// 由于下载的包都装在了node_modules文件夹下，右键查看了体积是28.8M
// 我们自己的项目体积是1.6M
// 整个项目体积是30.4M
// 发现第三方的包太大了 不利于成员之间共享项目源代码

// 解决方案：共享时剔除 node_modules
// 2.如何记录项目中安装了哪些包
// 在项目根目录中，创建一个叫做package.json的配置文件，即可用来记录项目中安装了哪些包。
// 从而方便剔除node_modules目录之后，在团队成员之间共亨项目的源代码。
//  现在已经自动创建了
// 注意:今后在项目开发中，一定要把node_modules文件夹，添加到.gitignore忽略文件中。
//就留下package.json这个现在是自动创建的了

// 3.快速创建package.json      现在已经自动创建了 不用自己建了
// npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，
// 快速创建package.json这个包管理配置文件:
//  作用:在执行命令所处的目录中，快速新建package.json 文件 
//   npm init -y
// 上述命令只能在英文的目录下成功运行!所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。
// 运行npm install命令安装包的时候，npm包管理工具会自动把包的名称和版本号，记录到package.json中。
// 里面东西你不要动        只要当前目录不为中文就可以
// package.json文件中，有一个dependencies节点，
// 专门用来记录您使用npm install命令安装了哪些包。


//-----------------devDependencies节点--------------------
// 如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，
// 则建议把这些包记录到devDependencies节点中。与之对应的，
// 如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies 节点中。
 
//  安装指定的包，并记录到devDependencies节点中
//   npm i 包名 -D
//  注意:上述命令是简写形式，等价于下面完整的写法:
//  npm install 包名 --save-dev

// typescript和webpack的loader等等，打包编译语法检查开发服务器等等，一系列开发用到的依赖项目上线以后都不能有
// 同一个包，要么安装到开发节点，要么安装在dependencies节点，不能两个节点同时安装

// 什么包开发的时候需要用，上线之后就可以不用啊？？？可以去网站上看上面有
// 比如你去那个网站搜了webpack  他教你下载时候就npm install webpack --save-dev

// -----------------解决下包速度慢的问题------------------------
// 1.为什么下包速度慢
// 在使用npm下包的时候，默认从国外的 https://registry.npmjs.org/服务器进行下载，
// 此时，网络数据的传输需要经过漫长的海底光缆，因此下包速度会很慢。

// 淘宝在国内搭建了一个服务器，专门把国外官方服务器上的包同步到国内的服务器，
// 然后在国内提供下包的服务。从而极大的提高了下包的速度。
//  每隔一段时间，自动把npm官方服务器的包同步到国内
//  扩展:
//  镜像(Mirrorinq）是一种文件存储形式，一个磁盘上的数据在另一个磁燕上存在一个完全相同的副本即为镜像。
   
   
//  -----切换npm的下包镜像源----------------------------
// 下包的镜像源，指的就是下包的服务器地址。
// #查看当前的下包镜像源
// npm config get registry
// #将下包的镜像源切换为淘宝镜像源
// npm config set registry=https://registry.npm.taobao.org/
// #检查镜像源是否下载成功
// npm config get registry


// --------------nrm---------------
// 为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm 提供的终端命令，
// 可以快速查看和切换下包的镜像源。
// #通过npm包管理器，将nrm安装为全局可用的工具
// npm i nrm -g
// #查看所有可用的镜像源
// nrm ls
//查看你现在用的哪个镜像源（服务器）
//# npm config get registry 
// #将下包的镜像源切换为taobao镜像
// nrm use taobao

//-------------------------包的分类---------------------------------
// 一、项目包
// 那些被安装到项目的node_modules目录中的包，都是项目包。
// 项目包又分为两类，分别是:
// 1.开发依赖包（(被记录到devDependencies节点中的包，只在开发期间会用到) npm i 包名 -D
// 2.核心依赖包(被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到)  npm i 包名

// 二、全局包  D:\developer_tools\node\node_global\node_modules
// 在执行npm install命令时，如果提供了-q参数，则会把包安装为全局包。  例如nrm切换镜像小工具
// npm i 包名 -g    全局安装指定的包
// npm uninstall 包名 -g    卸载全局指定的包
// 输入npm root -g命令查看全局包的安装位置

// 只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。
// 判断某个包是否需要全局安装后才能使用，可以参考官方提供的 使用说明 即可。
// 脚手架，命令行工具cli 应该都适合安装到 全局node包 

// ---------------- i5ting_toc 全局包 --------------------------
// i5ting_toc是一个可以把 md文档转为 html 页面的小工具，使用步骤如下:
// #将i5ting toc安装为全局包
// npm install -g i5ting_toc
// #调用i5ting toc，轻松实现md转html的功能
// i5ting_toc -f 要转换的md文件路径 -o
// 先用cmd 最开始肯定是c盘， 然后输入 
// cd/d直接你要转换文件得目录地址 i5ting_toc -f 要转换的md文件 -o

// ---------------------规范的包结构------------------------
// 在清楚了包的概念、以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构。
// 一个规范的包，它的组成结构，必须符合以下3点要求:
//  1.包必须以 单独的目录 而存在
//  2.包的顶级目录下要必须包含 package.json这个包管理配置文件
// 3.package.json中必须包含name，version，main这三个属性，分别代表包的 名字、版本号、包的入口。
// 包得入口
// 这就时为啥我们导入自定义的时候需要路径的原因吗?
// 我们要是引入moment时候需要的过程就是 moment文件夹->package.json文件->moment->main 就是他的路径

// 注意:以上3点要求是一个规范的包结构必须遵守的格式，关于更多的约束，
// 可以参考如下网址:https://yarnpkg.com/zh-Hans/docs/package-json


//------------------
//发布包
// npm publish
// //发布包时候登录
// npm login
// //查看你登录上去没
// npm whoami
// 4.删除已发布的包
// 运行npm unpublish包名--force命令，即可从npm 删除已发布的包。
// npm unpublish命令只能删除72小时以内发布的包
// npm unpublish 删除的包，在24小时内不允许重复发布

//-------查看包
// npm ls  查看当前项目安装的包 （项目跟目录必须有 package.json 文件）
// npm ls -g 查看全局已安装（-g 的意思是 global 全局的意思）
// npm ls -g --depth 0 这样就只会查到安装的包，并不会查到包的依赖
// npm ls --depth 0
// npm ls --depth 0 --prod  只想显示生产环境依赖的包
// npm ls --depth 0 --dev  只显示开发环境依赖的包